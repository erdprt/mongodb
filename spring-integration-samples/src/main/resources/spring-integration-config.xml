<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:integration="http://www.springframework.org/schema/integration"
	xmlns:integration-jms="http://www.springframework.org/schema/integration/jms"
	xmlns:integration-jmx="http://www.springframework.org/schema/integration/jmx"
	xmlns:file="http://www.springframework.org/schema/integration/file"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:integration-xml="http://www.springframework.org/schema/integration/xml"
	xmlns:int-jdbc="http://www.springframework.org/schema/integration/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
						http://www.springframework.org/schema/integration/xml
						http://www.springframework.org/schema/integration/xml/spring-integration-xml-2.2.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-3.1.xsd
						http://www.springframework.org/schema/integration
						http://www.springframework.org/schema/integration/spring-integration-2.2.xsd
						http://www.springframework.org/schema/integration/jms
						http://www.springframework.org/schema/integration/jms/spring-integration-jms-2.2.xsd
    					http://www.springframework.org/schema/integration/jmx
    					http://www.springframework.org/schema/integration/jmx/spring-integration-jmx-2.2.xsd
						http://www.springframework.org/schema/integration/file
						http://www.springframework.org/schema/integration/file/spring-integration-file-2.2.xsd
						http://www.springframework.org/schema/integration/jdbc
						http://www.springframework.org/schema/integration/jdbc/spring-integration-jdbc-2.2.xsd
						http://www.springframework.org/schema/util
						http://www.springframework.org/schema/util/spring-util-3.1.xsd">

	<context:property-placeholder
		location="classpath:spring-integration-config.properties" />

	<import resource="chain-default-config.xml" />
	<import resource="chain-product-config.xml" />
	<import resource="chain-person-config.xml" />

	<file:inbound-channel-adapter id="receiveChannel" directory="${folders.incoming}">
		<integration:poller fixed-rate="1000"/>
	</file:inbound-channel-adapter>

	<integration:chain id="checkFileChannel" input-channel="receiveChannel" output-channel="incomingFileRouterChannel">
		<integration:service-activator ref="checkFileHandler" method="handle">
		</integration:service-activator>
	</integration:chain>

	<bean id="checkFileHandler" class="fr.personal.erdprt.integration.handlers.CheckFileHandler" >
	</bean>

	<integration:channel id="incomingFileRouterChannel">
		<integration:queue capacity="${queue.capacity}"/>
	</integration:channel>
	
	<integration:header-value-router id="routerFileType" input-channel="incomingFileRouterChannel" header-name="fileType">
		<integration:mapping value="default" channel="splitDefaultChannel" />
		<integration:mapping value="person" channel="splitPersonChannel" />		
		<integration:mapping value="product" channel="splitProductChannel" />		
		<integration:mapping value="unknown" channel="errorChannel" />
	</integration:header-value-router>

	<!-- output : final point  -->
	<integration:channel id="outputChannel">
		<integration:queue capacity="${queue.capacity}"/>
		<!--	
		<integration:dispatcher task-executor="executor"/>
		  -->
	</integration:channel>

	<file:outbound-channel-adapter id="outputFiles" 
									channel="outputChannel" 
									directory="${folders.outgoing}" 
									filename-generator="defaultFileGenerator"/>


	<integration:channel id="errorChannel">
		<integration:queue capacity="${queue.capacity}"/>
		<!--	
		<integration:dispatcher task-executor="executor"/>
		  -->
	</integration:channel>

	<bean id="errorHandler" class="fr.personal.erdprt.integration.handlers.ErrorHandler">
	</bean>

	<integration:chain id="errorHandle" input-channel="errorChannel" output-channel="errorOutputChannel">
		<integration:service-activator ref="errorHandler" method="handle"/>
	</integration:chain>

	<integration:channel id="errorOutputChannel">
		<integration:queue capacity="${queue.capacity}"/>
	</integration:channel>


	<!-- Error channel -->
	<file:outbound-channel-adapter id="errorFiles" 
									channel="errorOutputChannel" 
									directory="${folders.errors}" 
									filename-generator="fileGenerator"/>

	
	<!-- UTILITIES -->
	
	<integration:poller id="defaultPoller" 
						task-executor="customTaskExecutor" 
						error-channel="errorChannel" 
						default="true" 
						max-messages-per-poll="${default.poller.maxMessagePerPoll}"
						fixed-rate="${default.poller.fixedRate}"/>
	<!--
		<integration:poller max-messages-per-poll="1" id="defaultPoller" default="true" fixed-rate="#{environmentSettings.intervalTriggerDefault}"/>
	  -->
	<!--
	<bean id="executor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="${executor.corePoolSize}" />
		<property name="maxPoolSize" value="${executor.maxPoolSize}" />
		<property name="queueCapacity" value="${executor.queueCapacity}" />
		<property name="keepAliveSeconds" value="${executor.keepAliveSeconds}" />
	</bean>
	  -->
	  
	<bean id="customTaskExecutor" class="fr.personal.erdprt.integration.concurrent.CustomThreadPoolTaskExecutor">
		<property name="corePoolSize" value="${executor.corePoolSize}" />
		<property name="maxPoolSize" value="${executor.maxPoolSize}" />
		<property name="queueCapacity" value="${executor.queueCapacity}" />
		<property name="keepAliveSeconds" value="${executor.keepAliveSeconds}" />
    <property name="allowCoreThreadTimeOut" value="${executor.allowCoreThreadTimeOut}" />
	</bean>
	  
	  
	<bean id="splitStringReader" class="fr.personal.erdprt.integration.splitters.readers.SplitStringReader" scope="prototype">
	</bean>	

	<bean id="splitFileReader" class="fr.personal.erdprt.integration.splitters.readers.SplitFileReader">
	</bean>
	
	<bean id="mockListener" class="fr.personal.erdprt.integration.listeners.MockListener">
	</bean>	
	
	<bean id="fileGenerator" class="fr.personal.erdprt.integration.generators.DefaultFileNameGenerator">
	</bean>
	
	<bean id="defaultFileGenerator" class="fr.personal.erdprt.integration.generators.UUIDFileNameGenerator">
	</bean>

	<bean id="interceptorTracer" class="fr.personal.erdprt.integration.interceptors.TracingInterceptor">
		<property name="mongoTemplate" ref="mongoTemplate"></property>
        <property name="endComponents">
            <list>
                <value>outputChannel</value>
                <value>errorOutputChannel</value>
            </list>
        </property>
	</bean>

	<!-- INTERCEPTORS -->
	<integration:channel-interceptor pattern="*Channel" ref="interceptorTracer">
	</integration:channel-interceptor>
	
	<!-- MONGO DB SETTINGS -->
	<bean id="mongo" class="com.mongodb.Mongo">
		<constructor-arg name="host" value="${mongo.host}"/>
		<constructor-arg name="port" value="${mongo.port}" />
	</bean>

	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg ref="mongo" />
		<constructor-arg name="databaseName" value="domain-integration" />
	</bean>
			
  	<!-- JMX PART -->	
	<integration-jmx:mbean-export default-domain="integration.domain" server="mbeanServer"/>
	
	<bean id="mbeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean">
		<property name="locateExistingServerIfPossible" value="true"/>
	</bean>	
			
</beans>
